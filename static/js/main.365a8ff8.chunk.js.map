{"version":3,"sources":["Components/Task/Task.module.css","Components/Task/Task.js","Components/TaskList.js","Components/HeadField.js","Containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","task","props","className","classes","Task","Span","onClick","lineThrough","content","Buttons","delete","taskList","tasks","map","x","index","text","deleteTask","key","headField","inputField","addInput","onKeyPress","addTaskWithEnter","onChange","updateInputValue","value","inputValue","type","placeholder","addButton","addTask","App","state","style","Center","shake","letsShake","setState","animShake","setTimeout","this","bind","evt","target","event","length","console","log","newArray","splice","currentTarget","classList","toggle","Done","join","HeadField","TaskList","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.365a8ff8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Task\":\"Task_Task__1quHT\",\"App\":\"Task_App__3JZL7\",\"Center\":\"Task_Center__1nVsZ\",\"Buttons\":\"Task_Buttons__3LKwP\",\"inputField\":\"Task_inputField__2anNr\",\"addInput\":\"Task_addInput__KZiQU\",\"addButton\":\"Task_addButton__VWtPD\",\"Span\":\"Task_Span__1ttpo\",\"Done\":\"Task_Done__3ER7N\",\"animShake\":\"Task_animShake__31kNG\",\"shake\":\"Task_shake__2-Yqj\"};","import React from 'react';\r\nimport classes from './Task.module.css';\r\n\r\nconst task = (props) => {\r\n\r\n\treturn (\r\n\t\t<li className = {classes.Task}><span className = {classes.Span} onClick = {props.lineThrough}>{props.content}</span><button className = {classes.Buttons}onClick ={props.delete}>X</button></li>\r\n\t\t)\r\n}\r\n\r\n\r\nexport default task;","import React from 'react';\r\nimport Task from './Task/Task.js'\r\nimport classes from './Task/Task.module.css'\r\n\r\nconst taskList = (props) => {\r\n\r\n   return props.tasks.map((x, index) => {\r\n\r\n   return <Task\r\n   content = {x.text}\r\n   delete = {() => props.deleteTask(index)}\r\n   lineThrough = {props.lineThrough}\r\n   key = {index}\r\n   />\r\n\r\n  })\r\n};\r\n\r\nexport default taskList;","import React from 'react';\r\nimport classes from './Task/Task.module.css'\r\n\r\nconst headField = (props) => {\r\n\r\n\treturn (\r\n\t\t<div className={classes.inputField}>\r\n          \t<input className = {classes.addInput} onKeyPress = {props.addTaskWithEnter} onChange = {props.updateInputValue} value = {props.inputValue}type=\"text\" placeholder=\"Enter your task here\"/>\r\n          \t<button className = {classes.addButton} onClick = {props.addTask}type=\"button\">Add</button>\r\n        </div>\r\n\t\t)\r\n}\r\n\r\nexport default headField","import React, { Component } from 'react';\nimport Task from '../Components/Task/Task.js'\nimport classes from '../Components/Task/Task.module.css';\nimport TaskList from '../Components/TaskList.js';\nimport HeadField from '../Components/HeadField.js'\n\nclass App extends Component {\n\nstate = {\n  tasks: [\n  {text: \"Who let the dog out ?\"},\n  {text: \"Learn React\"},\n  ],\n  inputValue: \"\",\n  style: [classes.App, classes.Center],\n  shake: {}\n\n}\n\nletsShake = () => {\n\n      this.setState ({style:[classes.App, classes.animShake]})\nsetTimeout(function(){ this.setState ({style:[classes.App]})}.bind(this), 1000);\n}\n\nupdateInputValue = (evt) => {\n  this.setState( {inputValue: evt.target.value, style:[classes.App]});\n\n}\n\n\naddTaskWithEnter = (event) => {\n\n  const inputValue = this.state.inputValue;\n\n  if(event.key === 'Enter' && inputValue.length > 0 && this.state.tasks.length < 6) {\n      this.letsShake();\n      this.setState ({tasks : [...this.state.tasks,{text: inputValue}], inputValue: \"\"});\n  }\n  if (this.state.tasks.length === 6 ) {\n    console.log(\"passed\")\n  }\n}\n\n\n\naddTask = (event) => {\nconst inputValue = this.state.inputValue;\n\nif (inputValue.length > 0 && this.state.tasks.length < 6) {\n      this.letsShake();\n      this.setState ({\n        tasks : [...this.state.tasks,{text: inputValue}],\n        inputValue: \"\",\n      });\n      }\n}\n\n\ndeleteTask = (index) => {\n  this.letsShake();\n  const newArray = this.state.tasks\n  newArray.splice(index, 1)\n        this.setState ({tasks: newArray})\n}\n\nlineThrough = (evt) => {\n\nevt.currentTarget.classList.toggle(classes.Done)\n}\n\nrender() {\n\n\n  return (\n    <div className={this.state.style.join(' ')}>\n\n        <HeadField\n        addTaskWithEnter={this.addTaskWithEnter}\n        updateInputValue={this.updateInputValue}\n        inputValue={this.state.inputValue}\n        addTask={this.addTask}\n        />\n\n        <TaskList\n        tasks={this.state.tasks}\n        deleteTask = {this.deleteTask}\n        lineThrough = {this.lineThrough}\n        />\n\n      </div>\n\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}